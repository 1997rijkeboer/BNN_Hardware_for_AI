-- Top-level entity for neural networks
-- With row-parallel inputs

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
    generic (
        INPUT_WIDTH     : integer := 8;
        OUTPUT_WIDTH    : integer := 4;
        INPUT_COLS      : integer := 28;
        INPUT_ROWS      : integer := 28;
        OUTPUT_COLS     : integer := 1
    );
    port(
        -- System
        clk         : in  std_logic;
        reset       : in  std_logic;

        -- Input data
        row_in      : in  std_logic_vector(INPUT_COLS*INPUT_WIDTH-1 downto 0);
        ready       : in  std_logic;

        -- Output data
        row_out     : out std_logic_vector(OUTPUT_COLS*OUTPUT_WIDTH-1 downto 0);
        done        : out std_logic
    );

end entity;


architecture struct of top is

    constant NUM_LAYERS : integer := $num_layers;
    signal rd_pass : std_logic_vector(0 to NUM_LAYERS);

    constant DBG_COUNT : integer := 10;
    constant DBG_WIDTH : integer := 20;
    type dbg_t is array(0 to DBG_COUNT-1) of std_logic_vector(DBG_WIDTH-1 downto 0);
    signal dbg_raw : std_logic_vector(DBG_COUNT*DBG_WIDTH-1 downto 0);
    signal dbg_row : dbg_t;

    signal row_0 : std_logic_vector(INPUT_COLS*INPUT_WIDTH-1 downto 0);
    $sig_gen
begin

    dbg_raw <= row_9;
    process (dbg_raw)
    begin
        for I in 0 to DBG_COUNT-1 loop
            dbg_row(I) <= dbg_raw((I+1)*DBG_WIDTH-1 downto I*DBG_WIDTH);
        end loop;
    end process;

    rd_pass(0) <= ready;
    done <= rd_pass(NUM_LAYERS);

    row_0 <= row_in;
    row_out <= row_$num_layers;

    $inst_gen
end architecture;
